   
   The site, on all pages
     ✓ should be using Bootstrap CSS
     ✓ should have a header element
     ✓ should have a footer element
     ✓ should have a link to /about in the footer
     ✓ should have a link to / in the footer
   
   The home page
     ✓ should be up and running
     ✓ should have your team logo
     ✓ should have a list of events
     ✓ should have a time tag for each event
     ✓ should have a link for each event
     1) should not show events that are over
     ✓ should have a link to create a new event
   
   The API
     ✓ should return an array of upcoming events in JSON format
     ✓ should allow for searching events by title
   
   The about page
     ✓ should have people on it
     ✓ should have a picture of each person
   
   The event detail pages
     2) should exist for each event and should have title, image, etc
     3) should allow Yale users to RSVP
     4) should reject RSVPs from non-Yale addresses
   
   The new event creation page
     ✓ should exist
     ✓ should have a form that can be posted back
     ✓ should have appropriate form fields and labels
     ✓ should use select inputs for year, month, day, hour and minute form elements.
     ✓ should have the appropriate options for select elements
   
   The form for creating new events
     ✓ should display errors to the user when the year is not an integer
     5) should display errors to the user when the year is more than 2016
     ✓ should display errors to the user when the year is less than 2015
     ✓ should display errors to the user when the month is not an integer
     ✓ should display errors to the user when the month is more than 11
     ✓ should display errors to the user when the month is less than 0
     ✓ should display errors to the user when the day is not an integer
     ✓ should display errors to the user when the day is more than 31
     ✓ should display errors to the user when the day is less than 1
     ✓ should display errors to the user when the hour is not an integer
     ✓ should display errors to the user when the hour is more than 23
     ✓ should display errors to the user when the hour is less than 0
     ✓ should display errors to the user when the image is not a gif or png
     ✓ should display errors to the user when the image is not a URL
     ✓ should display errors to the user when the location is too long
     ✓ should display errors to the user when the location is empty
     ✓ should display errors to the user when the title is too long
     ✓ should display errors to the user when the title is empty
     6) should redirect the user to the event detail page if the form is valid

   Executed 43 tests in 7 suites in 3s 536ms
       37 passes
       6 failed
   
   6) The form for creating new events should redirect the user to the event detail page if the form is valid
   
       Expected error code 302, but got 200
       
       + expected - actual
       
       -false
       +true
       
       at Request._callback (test/test.js:501:14)
       
       500 |       assert.ok(err === null, 'Error: ' + err);
       501 |       assert.ok(httpResponse.statusCode === 302, 'Expected error code 302, but got ' + httpResponse.statusCode);
       502 |       assert.ok(httpResponse.headers.hasOwnProperty('location'), 'http response header should include location.');
       
       at Request.self.callback (node_modules/request/request.js:187:22)
       
       186 |       self._callbackCalled = true
       187 |       self._callback.apply(self, arguments)
       188 |     }
       
       at Request.<anonymous> (node_modules/request/request.js:1048:10)
       
       1047 |     }
       1048 |     self.emit('complete', response, response.body)
       1049 |   })
       
       at IncomingMessage.<anonymous> (node_modules/request/request.js:969:12)
       
       968 |     responseContent.on('end', function (chunk) {
       969 |       self.emit('end', chunk)
       970 |     })
       
       at endReadableNT (_stream_readable.js:921:12)
   
   5) The form for creating new events should display errors to the user when the year is more than 2016
   
       Expected status code 200, but got302
       
       + expected - actual
       
       -false
       +true
       
       at Request._callback (test/test.js:478:16)
       
       477 |         assert.ok(err === null, 'Error: ' + err);
       478 |         assert.ok(httpResponse.statusCode === 200, 'Expected status code 200, but got' + httpResponse.statusCode);
       479 |         var window = jsdom.jsdom(body).defaultView;
       
       at Request.self.callback (node_modules/request/request.js:187:22)
       
       186 |       self._callbackCalled = true
       187 |       self._callback.apply(self, arguments)
       188 |     }
       
       at Request.<anonymous> (node_modules/request/request.js:1048:10)
       
       1047 |     }
       1048 |     self.emit('complete', response, response.body)
       1049 |   })
       
       at IncomingMessage.<anonymous> (node_modules/request/request.js:969:12)
       
       968 |     responseContent.on('end', function (chunk) {
       969 |       self.emit('end', chunk)
       970 |     })
       
       at endReadableNT (_stream_readable.js:921:12)
   
   4) The event detail pages should reject RSVPs from non-Yale addresses
   
       No BUTTON 'Submit'
       
       at Browser.pressButton (node_modules/zombie/lib/index.js:1197:7)
           at /source/index.js:938:4
           
           937 |     const button = this.button(selector);
           938 |     assert(button, `No BUTTON '${selector}'`);
           939 |     assert(!button.disabled, 'This button is disabled');
           
       at test/test.js:264:10
       
       263 |         .fill('email', email)
       264 |         .pressButton('Submit', function(){
       265 |           assert.ok(browser.query('ul.form-errors'), 'RSVP from joker at Harvard should have been rejected.');
       
       at EventLoop.done (node_modules/zombie/lib/eventloop.js:589:11)
           at /source/eventloop.js:445:8
           
           444 |       try {
           445 |         callback(error);
           446 |       } catch (error) {
           
       at Immediate._onImmediate (node_modules/zombie/lib/eventloop.js:688:71)
           at /source/eventloop.js:557:17
           
           556 |           else
           557 |             this.emit('idle');
           558 |         }
           
   
   3) The event detail pages should allow Yale users to RSVP
   
       No BUTTON 'Submit'
       
       at Browser.pressButton (node_modules/zombie/lib/index.js:1197:7)
           at /source/index.js:938:4
           
           937 |     const button = this.button(selector);
           938 |     assert(button, `No BUTTON '${selector}'`);
           939 |     assert(!button.disabled, 'This button is disabled');
           
       at test/test.js:250:10
       
       249 |         .fill('email', email)
       250 |         .pressButton('Submit', function(){
       251 |           assert.ok(browser.html().indexOf(email) > -1, 'Email ' + email + ' not successfully RSVP\'d.');
       
       at EventLoop.done (node_modules/zombie/lib/eventloop.js:589:11)
           at /source/eventloop.js:445:8
           
           444 |       try {
           445 |         callback(error);
           446 |       } catch (error) {
           
       at Immediate._onImmediate (node_modules/zombie/lib/eventloop.js:688:71)
           at /source/eventloop.js:557:17
           
           556 |           else
           557 |             this.emit('idle');
           558 |         }
           
   
   2) The event detail pages should exist for each event and should have title, image, etc
   
       No image for event 2
       
       at test/test.js:235:16
       
       234 |         assert.ok(b.query('span#location'), 'No location for event '  + i);
       235 |         assert.ok(b.query('img#image'), 'No image for event '  + i);
       236 |         assert.ok(b.query('ul#attendees'), 'No attendees for event '  + i);
       
       at node_modules/async/lib/async.js:52:16
       
       51 |             if (fn === null) return;
       52 |             fn.apply(this, arguments);
       53 |             fn = null;
       
       at node_modules/async/lib/async.js:361:13
       
       360 |         }, function (err) {
       361 |             callback(err, results);
       362 |         });
       
       at node_modules/async/lib/async.js:52:16
       
       51 |             if (fn === null) return;
       52 |             fn.apply(this, arguments);
       53 |             fn = null;
       
       at done (node_modules/async/lib/async.js:246:17)
       
       245 |             else if (key === null && completed <= 0) {
       246 |                 callback(null);
       247 |             }
       
       at node_modules/async/lib/async.js:44:16
       
       43 |             if (fn === null) throw new Error("Callback was already called.");
       44 |             fn.apply(this, arguments);
       45 |             fn = null;
       
       at node_modules/async/lib/async.js:358:17
       
       357 |                 results[index] = v;
       358 |                 callback(err);
       359 |             });
       
       at test/test.js:225:9
       
       224 |       browser.visit(url, function(){
       225 |         cb(null, browser);
       226 |       });
       
       at EventLoop.done (node_modules/zombie/lib/eventloop.js:589:11)
           at /source/eventloop.js:445:8
           
           444 |       try {
           445 |         callback(error);
           446 |       } catch (error) {
           
       at Immediate._onImmediate (node_modules/zombie/lib/eventloop.js:688:71)
           at /source/eventloop.js:557:17
           
           556 |           else
           557 |             this.emit('idle');
           558 |         }
           
   
   1) The home page should not show events that are over
   
       Expected to not see events in the past /
       
       + expected - actual
       
       -false
       +true
       
       at Context.<anonymous> (test/test.js:138:12)
       
       137 |     // Event #4 is in the default data and has a date in the past
       138 |     assert.ok(!this.browser.query('li.event[id$="event-4"]'), 'Expected to not see events in the past ' + this.browser.location.pathname);
       139 |   });
       
